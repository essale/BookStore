@model IEnumerable<BookStore.Models.Order>

@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (!(bool)ViewData["readOnly"])
{
	<h2>Last Month Sales Per Day</h2>
	<svg></svg>
}
<h2>Orders</h2>
<table class="table table-striped table-hover">
	<thead>
		<tr>
			<th>
				@Html.DisplayNameFor(model => model.Customer)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Book)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Quantity)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.TotalPrice)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Date)
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.Customer.EmailAddress)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Book.Title)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Quantity)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.TotalPrice)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.Date)
				</td>

				@if (!(bool)ViewData["readOnly"])
				{

					<td>
						<a asp-action="Edit" class="btn button-image editBookButton" asp-route-id="@item.OrderId">Edit</a> |
						<a asp-action="Details" class="btn button-image detBookButton" asp-route-id="@item.OrderId">Details</a> |
						<a asp-action="Delete" class="btn button-image delBookButton" asp-route-id="@item.OrderId">Delete</a>
					</td>
				}
			</tr>
		}
	</tbody>
</table>

@section Scripts {
	<script src="https://d3js.org/d3.v4.min.js"></script>
	<script>
		function LoadSalesGraph() {
			$.ajax({
				url: '/Orders/OrdersPerDay',
				type: 'GET',
				dataType: 'json',
				success: function (list) {
					if (list == "fail") {
						alert('error');
					}
					else {
						var arr = [];
						for (var i in list) {
							arr.push(
								{
									date: new Date(list[i].id), //date
									value: list[i].counter //sales
								});
						}
						console.log(arr)
						drawChart(arr);

					}
				}
			})
		}
		function drawChart(data) {
			var svgWidth = 1200, svgHeight = 400;
			var margin = { top: 20, right: 20, bottom: 30, left: 50 };
			var width = svgWidth - margin.left - margin.right;
			var height = svgHeight - margin.top - margin.bottom;
			var svg = d3.select('svg')
				.attr("width", svgWidth)
				.attr("height", svgHeight);
			var g = svg.append("g")
				.attr("transform",
					"translate(" + margin.left + "," + margin.top + ")"
				);

			var x = d3.scaleTime().rangeRound([0, width]);
			var y = d3.scaleLinear().rangeRound([height, 0]);

			var line = d3.line()
				.x(function (d) { return x(d.date) })
				.y(function (d) { return y(d.value) })
			x.domain(d3.extent(data, function (d) { return d.date }));
			y.domain(d3.extent(data, function (d) { return d.value }));

			g.append("g")
				.attr("transform", "translate(0," + height + ")")
				.call(d3.axisBottom(x))
				.select(".domain")
				.remove();

			g.append("path")
				.datum(data)
				.attr("fill", "none")
				.attr("stroke", "steelblue")
				.attr("stroke-linejoin", "round")
				.attr("stroke-linecap", "round")
				.attr("stroke-width", 2)
				.attr("d", line);

			g.append("g")
				.call(d3.axisLeft(y))
				.append("text")
				.attr("fill", "#000")
				.attr("transform", "rotate(-90)")
				.attr("y", 6)
				.attr("dy", "0.71em")
				.attr("text-anchor", "end")
				.text("Book Sales Per Day");
		}

		LoadSalesGraph()
	</script>
}
